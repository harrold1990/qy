# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_counted_file_parser', [dirname(__file__)])
        except ImportError:
            import _counted_file_parser
            return _counted_file_parser
        if fp is not None:
            try:
                _mod = imp.load_module('_counted_file_parser', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _counted_file_parser = swig_import_helper()
    del swig_import_helper
else:
    import _counted_file_parser
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _counted_file_parser.new_array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _counted_file_parser.delete_array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _counted_file_parser.array___getitem__(self, *args)
    def __setitem__(self, *args): return _counted_file_parser.array___setitem__(self, *args)
    def cast(self): return _counted_file_parser.array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _counted_file_parser.array_frompointer
    if _newclass:frompointer = staticmethod(_counted_file_parser.array_frompointer)
array_swigregister = _counted_file_parser.array_swigregister
array_swigregister(array)

def array_frompointer(*args):
  return _counted_file_parser.array_frompointer(*args)
array_frompointer = _counted_file_parser.array_frompointer


def open_counted_file(*args):
  return _counted_file_parser.open_counted_file(*args)
open_counted_file = _counted_file_parser.open_counted_file

def close_counted_file():
  return _counted_file_parser.close_counted_file()
close_counted_file = _counted_file_parser.close_counted_file

def read_metadata():
  return _counted_file_parser.read_metadata()
read_metadata = _counted_file_parser.read_metadata

def read_chunk():
  return _counted_file_parser.read_chunk()
read_chunk = _counted_file_parser.read_chunk

def get_paused():
  return _counted_file_parser.get_paused()
get_paused = _counted_file_parser.get_paused

def get_scan_step():
  return _counted_file_parser.get_scan_step()
get_scan_step = _counted_file_parser.get_scan_step

def get_scan_loop():
  return _counted_file_parser.get_scan_loop()
get_scan_loop = _counted_file_parser.get_scan_loop

def get_motor_controller_position(*args):
  return _counted_file_parser.get_motor_controller_position(*args)
get_motor_controller_position = _counted_file_parser.get_motor_controller_position

def get_scan_label_nbytes():
  return _counted_file_parser.get_scan_label_nbytes()
get_scan_label_nbytes = _counted_file_parser.get_scan_label_nbytes

def get_scan_label():
  return _counted_file_parser.get_scan_label()
get_scan_label = _counted_file_parser.get_scan_label

def get_temporary_file():
  return _counted_file_parser.get_temporary_file()
get_temporary_file = _counted_file_parser.get_temporary_file

def get_scan_nsteps():
  return _counted_file_parser.get_scan_nsteps()
get_scan_nsteps = _counted_file_parser.get_scan_nsteps

def get_scan_nloops():
  return _counted_file_parser.get_scan_nloops()
get_scan_nloops = _counted_file_parser.get_scan_nloops

def get_scan_integration_time():
  return _counted_file_parser.get_scan_integration_time()
get_scan_integration_time = _counted_file_parser.get_scan_integration_time

def get_scan_close_shutter():
  return _counted_file_parser.get_scan_close_shutter()
get_scan_close_shutter = _counted_file_parser.get_scan_close_shutter

def get_scan_dont_move():
  return _counted_file_parser.get_scan_dont_move()
get_scan_dont_move = _counted_file_parser.get_scan_dont_move

def get_scan_motor_controller():
  return _counted_file_parser.get_scan_motor_controller()
get_scan_motor_controller = _counted_file_parser.get_scan_motor_controller

def get_scan_start_position():
  return _counted_file_parser.get_scan_start_position()
get_scan_start_position = _counted_file_parser.get_scan_start_position

def get_scan_stop_position():
  return _counted_file_parser.get_scan_stop_position()
get_scan_stop_position = _counted_file_parser.get_scan_stop_position

def get_scan_type():
  return _counted_file_parser.get_scan_type()
get_scan_type = _counted_file_parser.get_scan_type

def get_fpga_rate(*args):
  return _counted_file_parser.get_fpga_rate(*args)
get_fpga_rate = _counted_file_parser.get_fpga_rate

def get_number_rate_8x2(*args):
  return _counted_file_parser.get_number_rate_8x2(*args)
get_number_rate_8x2 = _counted_file_parser.get_number_rate_8x2

def get_number_rate_4x4(*args):
  return _counted_file_parser.get_number_rate_4x4(*args)
get_number_rate_4x4 = _counted_file_parser.get_number_rate_4x4

def get_special_rate(*args):
  return _counted_file_parser.get_special_rate(*args)
get_special_rate = _counted_file_parser.get_special_rate

def get_aborted():
  return _counted_file_parser.get_aborted()
get_aborted = _counted_file_parser.get_aborted
# This file is compatible with both classic and new-style classes.


